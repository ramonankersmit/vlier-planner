import { chromium } from 'playwright';
import { fileURLToPath } from 'url';
import { dirname, resolve } from 'path';
import { promises as fs } from 'fs';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const rootDir = resolve(__dirname, '..');
const samplesDir = resolve(rootDir, '../samples');
const outputDir = resolve(rootDir, 'src/assets/screens');

const pdfPath = resolve(samplesDir, 'voorbeeld-studiewijzer.pdf');
const docxPath = resolve(samplesDir, 'voorbeeld-studiewijzer.docx');

const sampleSources = [
  {
    base64Path: resolve(samplesDir, 'voorbeeld-studiewijzer.pdf.base64'),
    outputPath: pdfPath,
  },
  {
    base64Path: resolve(samplesDir, 'voorbeeld-studiewijzer.docx.base64'),
    outputPath: docxPath,
  },
];

async function ensureSampleFiles() {
  await fs.mkdir(samplesDir, { recursive: true });
  for (const { base64Path, outputPath } of sampleSources) {
    try {
      await fs.access(outputPath);
      continue;
    } catch (error) {
      // file is missing, decode from base64 source
    }

    const encoded = await fs.readFile(base64Path, 'utf8');
    const buffer = Buffer.from(encoded.trim(), 'base64');
    await fs.writeFile(outputPath, buffer);
  }
}

async function ensureUpload(page) {
  await page.goto('http://127.0.0.1:5173/', { waitUntil: 'networkidle' });
  await page.waitForTimeout(1000);
  await page.getByRole('link', { name: 'Uploads' }).click();
  await page.waitForTimeout(1000);
  const fileInput = page.locator('input[type="file"]');
  await fileInput.setInputFiles([pdfPath, docxPath]);
  const uploadingIndicator = page.locator('text=Bezig met uploadenâ€¦');
  if (await uploadingIndicator.count()) {
    await uploadingIndicator.first().waitFor({ state: 'hidden', timeout: 60000 });
  }
  await page.waitForTimeout(1000);
}

async function captureScreens() {
  await ensureSampleFiles();
  const browser = await chromium.launch();
  const page = await browser.newPage({ viewport: { width: 1440, height: 900 } });
  await ensureUpload(page);

  await fs.mkdir(outputDir, { recursive: true });

  const screenshotData = [];

  const uploadsPath = resolve(outputDir, 'uploads.png');
  await page.screenshot({ path: uploadsPath, fullPage: true });
  screenshotData.push(['uploadsScreenshot', uploadsPath]);

  await page.getByRole('link', { name: 'Weekoverzicht' }).click();
  await page.waitForTimeout(2000);
  const weekoverzichtPath = resolve(outputDir, 'weekoverzicht.png');
  await page.screenshot({ path: weekoverzichtPath, fullPage: true });
  screenshotData.push(['weekoverzichtScreenshot', weekoverzichtPath]);

  await page.getByRole('link', { name: 'Matrix overzicht' }).click();
  await page.waitForTimeout(2000);
  const matrixPath = resolve(outputDir, 'matrix.png');
  await page.screenshot({ path: matrixPath, fullPage: true });
  screenshotData.push(['matrixScreenshot', matrixPath]);

  await browser.close();

  const lines = [
    '// AUTO-GENERATED BY scripts/captureScreens.mjs',
    '// Exporteert data-URL strings zodat er geen binaire assets nodig zijn in de repository.',
    '',
  ];

  for (const [exportName, filePath] of screenshotData) {
    const buffer = await fs.readFile(filePath);
    const base64 = buffer.toString('base64');
    const chunks = base64.match(/.{1,120}/g) ?? [];
    const [firstChunk = ''] = chunks.splice(0, 1);
    lines.push(`export const ${exportName} = (`);
    lines.push(`  [`);
    lines.push(`    "data:image/png;base64,${firstChunk}",`);
    for (const chunk of chunks) {
      lines.push(`    "${chunk}",`);
    }
    lines.push(`  ].join('') as const`);
    lines.push(`);`);
    await fs.unlink(filePath);
  }

  await fs.writeFile(resolve(outputDir, 'demoScreenshots.ts'), `${lines.join('\n')}\n`);
}

captureScreens().catch((error) => {
  console.error(error);
  process.exit(1);
});
